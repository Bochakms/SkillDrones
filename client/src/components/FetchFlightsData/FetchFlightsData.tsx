// components/FetchFlightsData/FetchFlightsData.tsx
import React, { useEffect, useState } from "react";
import { useFlights } from "../../hooks/useFlights";
import FlightsTable from "../FlightsTable/FlightsTable";
import { Filters } from "../Filters/Filters";
import { Button } from "../Button/Button";
import type { FlightsFilter } from "../../types/flightTypes";
import styles from "./FetchFlightsData.module.scss";

interface FetchFlightsDataProps {
  autoLoad?: boolean;
  className?: string;
}

const FetchFlightsData: React.FC<FetchFlightsDataProps> = ({
  autoLoad = true,
  className = "",
}) => {
  const {
    flights,
    loading,
    error,
    lastUpdated,
    regions,
    regionsLoading,
    validationErrors,
    fetchFlights,
    fetchRegions,
    clearError,
    clearFlights,
  } = useFlights();

  const [filters, setFilters] = useState<FlightsFilter>({});

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    fetchRegions();
  }, [fetchRegions]);

  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (autoLoad) {
      fetchFlights(filters);
    }
  }, [autoLoad, fetchFlights]);

  const handleApplyFilters = () => {
    fetchFlights(filters);
  };

  const handleResetFilters = () => {
    const resetFilters: FlightsFilter = {};
    setFilters(resetFilters);
    fetchFlights(resetFilters);
  };

  const handleReload = () => {
    fetchFlights(filters);
  };

  return (
    <div className={`${styles.fetchFlights} ${className}`}>
      <div className={styles.header}>
        <div>
          <h2 className={styles.title}>–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ—Ç–∞—Ö</h2>
          {lastUpdated && (
            <div className={styles.timestamp}>
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdated.toLocaleTimeString("ru-RU")}
            </div>
          )}
        </div>

        <div className={styles.controls}>
          <Button
            variant="primary"
            onClick={handleReload}
            isDisabled={loading}
            isLoading={loading}
            icon="üîÑ"
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>

          <Button variant="secondary" onClick={clearFlights} icon="‚ùå">
            –û—á–∏—Å—Ç–∏—Ç—å
          </Button>
        </div>
      </div>

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <Filters
        filters={filters}
        regions={regions}
        regionsLoading={regionsLoading}
        validationErrors={validationErrors}
        onFiltersChange={setFilters}
        onApplyFilters={handleApplyFilters}
        onResetFilters={handleResetFilters}
      />

      {error && (
        <div className={styles.error}>
          <span>‚ùå {error}</span>
          <button
            onClick={clearError}
            style={{
              background: "none",
              border: "none",
              color: "inherit",
              cursor: "pointer",
              fontSize: "16px",
            }}
          >
            ‚úï
          </button>
        </div>
      )}

      <FlightsTable flights={flights} loading={loading} />

      {flights.length > 0 && !loading && (
        <div className={styles.stats}>
          –ü–æ–∫–∞–∑–∞–Ω–æ {flights.length} –ø–æ–ª–µ—Ç–æ–≤
          {filters.regionId &&
            ` –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${
              regions.find((r) => r.id === filters.regionId)?.name
            }`}
          {filters.startDate && ` —Å ${filters.startDate}`}
          {filters.endDate && ` –ø–æ ${filters.endDate}`}
        </div>
      )}
    </div>
  );
};

export default FetchFlightsData;
